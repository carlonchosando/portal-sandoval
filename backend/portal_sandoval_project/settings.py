"""
Django settings for portal_sandoval_project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Carga las variables de entorno desde el archivo .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Leemos la SECRET_KEY desde las variables de entorno.
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# El modo DEBUG también se controla desde el .env. 'True' es para desarrollo.
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Hosts/dominios permitidos para la aplicación.
# Lo leemos del .env para poder cambiarlo fácilmente en producción.
# NOTA DE DEPURACIÓN: Usamos '*' para permitir cualquier host.
# Esto es inseguro para producción, pero es la prueba definitiva para
# descartar que ALLOWED_HOSTS sea el problema de CORS/conexión.
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Apps de terceros
    'rest_framework', # La librería para construir nuestra API
    'rest_framework_simplejwt', # Para la autenticación por token
    'corsheaders',    # Para permitir peticiones desde el frontend
    
    # Nuestras apps
    'clients.apps.ClientsConfig',
    'projects.apps.ProjectsConfig',
    'tasks.apps.TasksConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # La posición recomendada para CorsMiddleware es aquí, después de las sesiones
    # y antes de CommonMiddleware, para que pueda manejar las peticiones CORS correctamente.
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- Configuración de CORS ---
# --- PASO DE DEPURACIÓN DE CORS ---
# Volvemos temporalmente a la configuración más permisiva para aislar el problema.
# Si esto funciona, el problema está en la lista específica de orígenes.
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", 
    "http://127.0.0.1:3000",
    "http://frontend:3000",  # Para comunicación entre contenedores
]
CORS_ALLOW_CREDENTIALS = True # Permite que el navegador envíe cookies (si se usan en el futuro).

# A veces, ser más explícito con los métodos y cabeceras permitidos soluciona
# problemas de CORS en peticiones complejas (como POST con JSON).
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "origin",
]

# --- Configuración de CSRF ---
# Le decimos a Django que confíe en las peticiones POST que vienen de nuestro frontend.
# Esto es crucial para que el login y otros formularios funcionen.
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
]
# --- Configuración de Django REST Framework ---
REST_FRAMEWORK = {
    # Usamos la autenticación por JSON Web Token (JWT) como método por defecto.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Por defecto, requerimos que el usuario esté autenticado para acceder a cualquier endpoint.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

ROOT_URLCONF = 'portal_sandoval_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'clients.context_processors.app_config',  # Context processor para configuración personalizable
            ],
        },
    },
]

WSGI_APPLICATION = 'portal_sandoval_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
#
# Aquí está la magia: configuramos la conexión a la base de datos PostgreSQL
# usando las variables que definimos en el archivo .env y que Docker le pasa al contenedor.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': 'db',  # IMPORTANTE: 'db' es el nombre del servicio de la BD en docker-compose.yml
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-es' # Cambiado a español

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Ruta donde Django recopilará todos los archivos estáticos
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Configuración para archivos subidos por los usuarios (media files)
# Es necesario para que el campo `attachment` en el modelo Task funcione.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

# Configuración de correo electrónico para recuperación de contraseñas
if DEBUG:
    # En desarrollo, mostrar correos en la consola
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'noreply@portalsandoval.com'
else:
    # En producción, usar SMTP real
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
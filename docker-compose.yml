# Versión del formato de Docker Compose. '3.8' es una versión moderna y estable.
version: '3.8'

# Definición de los servicios (contenedores) que componen nuestra aplicación.
services:
  # Servicio del Backend (API con Django)
  backend:
    build: ./backend  # Construye la imagen de Docker usando el Dockerfile en la carpeta ./backend
    container_name: portal_sandoval_backend
    # Le decimos al contenedor que primero dé permisos de ejecución al script y luego lo ejecute.
    # Esto soluciona problemas de permisos de archivos en sistemas Linux/macOS.
    command: sh -c "chmod +x /app/entrypoint.sh && /app/entrypoint.sh"
    volumes:
      - ./backend:/app # Monta el código local en el contenedor para ver cambios en tiempo real.
      - static_volume:/app/static # Volumen para archivos estáticos (CSS, JS de Django Admin)
      - media_volume:/app/media # Volumen para archivos subidos por los usuarios (imágenes, PDFs)
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor al puerto 8000 de tu máquina.
    env_file:
      - ./.env # Carga las variables de entorno desde el archivo .env
    depends_on:
      - db # Le dice a Docker que este servicio no debe iniciar hasta que el servicio 'db' esté listo.

  # Servicio de la Base de Datos (PostgreSQL)
  db:
    image: postgres:15-alpine # Usa una imagen oficial de PostgreSQL, ligera y segura.
    container_name: portal_sandoval_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persiste los datos de la BD aunque el contenedor se detenga.
    env_file:
      - ./.env # Carga las variables de entorno (usuario, contraseña, nombre de la BD).
    ports:
      # Mapeamos el puerto 5432 del contenedor al puerto 5434 de tu máquina
      # para evitar conflictos si ya tienes PostgreSQL corriendo localmente.
      - "5434:5432"

  # Servicio del Frontend (Interfaz de Usuario con React)
  frontend:
    build: ./frontend # Construye la imagen usando el Dockerfile en la carpeta ./frontend
    container_name: portal_sandoval_frontend
    volumes:
      - ./frontend:/app # Monta el código local para ver cambios en tiempo real.
      - /app/node_modules # Un truco para evitar que node_modules local sobreescriba el del contenedor.
    ports:
      - "3000:3000" # Mapea el puerto 3000 del contenedor al 3000 de tu máquina.
    depends_on:
      - backend # El frontend depende del backend para obtener datos.

# Definición de los volúmenes. Los volúmenes son la forma correcta de persistir datos en Docker.
volumes:
  postgres_data: # Volumen para la base de datos
  static_volume: # Volumen para los archivos estáticos de Django
  media_volume: # Volumen para los archivos subidos